import{s as t}from"./c.c13d4687.js";import{g as e}from"./c.da136530.js";import{aR as s,ac as o}from"./c.603f0acc.js";import{ad as r,ae as n}from"./c.449fa12b.js";import{e as a,s as i,c,d as u}from"./c.655d6539.js";function _(){return a(Date.now())}function f(){return i(Date.now())}const m=[],g=t=>t.callWS({type:"energy/info"}),y=t=>((t,e)=>{const s={};for(const o of t){const t=e(o);t in s?s[t].push(o):s[t]=[o]}return s})(t.energy_sources,(t=>t.type)),p=(a,i={})=>{let y="_energy";if(i.key){if(!i.key.startsWith("energy_"))throw new Error("Key need to start with energy_");y=`_${i.key}`}if(a.connection[y])return a.connection[y];m.push(i.key);const p=s(a.connection,y,(async()=>{if(p.prefs||(p.prefs=await(t=>t.callWS({type:"energy/get_prefs"}))(a)),p._refreshTimeout&&clearTimeout(p._refreshTimeout),p._active&&(!p.end||p.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),p._refreshTimeout=window.setTimeout((()=>p.refresh()),t.getTime()-Date.now())}return(async(s,r,a,i)=>{const[_,f,m]=await Promise.all([e(s),t(s.connection,o),g(s)]),y=_.find((t=>"co2signal"===t.domain));let p;if(y)for(const t of f){if(t.config_entry_id!==y.entry_id)continue;const e=s.states[t.entity_id];if(e&&"%"===e.attributes.unit_of_measurement){p=e.entity_id;break}}const d=[],l=[];for(const t of r.energy_sources)if("solar"!==t.type)if("gas"!==t.type)if("battery"!==t.type){for(const e of t.flow_from){d.push(e.stat_energy_from),l.push(e.stat_energy_from),e.stat_cost&&l.push(e.stat_cost);const t=m.cost_sensors[e.stat_energy_from];t&&l.push(t)}for(const e of t.flow_to){l.push(e.stat_energy_to),e.stat_compensation&&l.push(e.stat_compensation);const t=m.cost_sensors[e.stat_energy_to];t&&l.push(t)}}else l.push(t.stat_energy_from),l.push(t.stat_energy_to);else{l.push(t.stat_energy_from),t.stat_cost&&l.push(t.stat_cost);const e=m.cost_sensors[t.stat_energy_from];e&&l.push(e)}else l.push(t.stat_energy_from);const h=u(i||new Date,a),w=c(a,-1),T=await n(s,w,i,l,h>35?"month":h>2?"day":"hour");let v;return void 0!==p&&(v=await(async(t,e,s,o,r,n="hour")=>t.callWS({type:"energy/fossil_energy_consumption",start_time:e.toISOString(),end_time:null==r?void 0:r.toISOString(),energy_statistic_ids:s,co2_statistic_id:o,period:n}))(s,a,d,p,i,h>35?"month":h>2?"day":"hour")),Object.values(T).forEach((t=>{t.length&&new Date(t[0].start)>w&&t.unshift({...t[0],start:w.toISOString(),end:w.toISOString(),sum:0,state:0})})),{start:a,end:i,info:m,prefs:r,stats:T,co2SignalConfigEntry:y,co2SignalEntity:p,fossilEnergyConsumption:v}})(a,p.prefs,p.start,p.end)})),d=p.subscribe;p.subscribe=t=>{const e=d(t);return p._active++,()=>{p._active--,p._active<1&&(clearTimeout(p._refreshTimeout),p._refreshTimeout=void 0),e()}},p._active=0,p.prefs=i.prefs;const l=new Date;p.start=l.getHours()>0?f():r(),p.end=l.getHours()>0?_():function(){var t=new Date,e=t.getFullYear(),s=t.getMonth(),o=t.getDate(),r=new Date(0);return r.setFullYear(e,s,o-1),r.setHours(23,59,59,999),r}();const h=()=>{p._updatePeriodTimeout=window.setTimeout((()=>{p.start=f(),p.end=_(),h()}),c(_(),1).getTime()-Date.now())};return h(),p.clearPrefs=()=>{p.prefs=void 0},p.setPeriod=(t,e)=>{var s;p.start=t,p.end=e,p.start.getTime()!==f().getTime()||(null===(s=p.end)||void 0===s?void 0:s.getTime())!==_().getTime()||p._updatePeriodTimeout?p._updatePeriodTimeout&&(clearTimeout(p._updatePeriodTimeout),p._updatePeriodTimeout=void 0):h()},p},d=t=>t.callWS({type:"energy/solar_forecast"}),l=(t,e)=>{for(const s of e.energy_sources){if("gas"!==s.type)continue;const e=t.states[s.stat_energy_from];if(null!=e&&e.attributes.unit_of_measurement)return"Wh"===e.attributes.unit_of_measurement?"kWh":e.attributes.unit_of_measurement}};export{_ as a,l as b,d as c,y as e,p as g,f as s};
