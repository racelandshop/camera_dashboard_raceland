{"code":"import { __decorate } from \"tslib\";\r\n//import '@material/mwc-button/mwc-button';\r\nimport { mdiPencil } from '@mdi/js';\r\nimport { css, html, LitElement } from 'lit';\r\nimport { classMap } from 'lit/directives/class-map';\r\nimport { customElement, property, state } from 'lit/decorators';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport { updateCameraInformation } from '../../data/websocket';\r\nimport { customSchema, customCameraExtraOptionSchema } from '../../schemas';\r\nimport { localize } from '../../localize/localize';\r\nimport { getCameraEntities, removeTrailingSpacesInput } from '../../common';\r\nimport '../camera-brand-icon-button';\r\nimport '../search-input-round';\r\nexport const haStyleDialog = css `\n  /* mwc-dialog (ha-dialog) styles */\n  ha-dialog {\n    --mdc-dialog-min-width: 400px;\n    --mdc-dialog-max-width: 600px;\n    --mdc-dialog-heading-ink-color: var(--primary-text-color);\n    --mdc-dialog-content-ink-color: var(--primary-text-color);\n    --justify-action-buttons: space-between;\n    --mdc-switch__pointer_events: auto;\n  }\n\n  ha-dialog .form {\n    padding-bottom: 24px;\n    color: var(--primary-text-color);\n  }\n\n  a {\n    color: var(--accent-color) !important;\n  }\n\n  /* make dialog fullscreen on small screens */\n  @media all and (max-width: 450px), all and (max-height: 500px) {\n    ha-dialog {\n      --mdc-dialog-min-width: calc(100vw - env(safe-area-inset-right) - env(safe-area-inset-left));\n      --mdc-dialog-max-width: calc(100vw - env(safe-area-inset-right) - env(safe-area-inset-left));\n      --mdc-dialog-min-height: 100%;\n      --mdc-dialog-max-height: 100%;\n      --vertial-align-dialog: flex-end;\n      --ha-dialog-border-radius: 0px;\n    }\n  }\n  mwc-button.warning {\n    --mdc-theme-primary: var(--error-color);\n  }\n  .error {\n    color: var(--error-color);\n  }\n`;\r\nlet HuiEditDialogCamera = class HuiEditDialogCamera extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._currTabIndex = 0;\r\n        this._computeLabelCallback = schema => {\r\n            return localize(`form.${schema.name}`);\r\n        };\r\n    }\r\n    async showDialog(params) {\r\n        const form_schema = {\r\n            header: { title: localize('common.add_camera') },\r\n            body: customSchema,\r\n            extra_options: customCameraExtraOptionSchema,\r\n            footer: {\r\n                accept: localize('common.edit_camera'),\r\n            },\r\n        };\r\n        this._params = params;\r\n        this.schema = form_schema;\r\n        this.dialogOpen = true;\r\n        this.cameraInfo = this._params.cameraInfo;\r\n        this.registeredCameras = getCameraEntities(this.hass.states).map((camera) => camera.name);\r\n        if (this.cameraInfo.authentication !== undefined) {\r\n            this.cameraInfo.authentication =\r\n                this.cameraInfo.authentication[0].toUpperCase() + this.cameraInfo.authentication.substring(1);\r\n        }\r\n        if (this.cameraInfo.verify_ssl != undefined) {\r\n            let verify_ssl = this.cameraInfo.verify_ssl;\r\n            verify_ssl = String(this.cameraInfo.verify_ssl);\r\n            this.cameraInfo.verify_ssl = verify_ssl[0].toUpperCase() + verify_ssl.substring(1);\r\n        }\r\n    }\r\n    closeDialog() {\r\n        this._currTabIndex = 0;\r\n        this.dialogOpen = undefined;\r\n        fireEvent(this, 'dialog-closed', { dialog: this.localName });\r\n        return true;\r\n    }\r\n    render() {\r\n        if (this.cameraInfo === undefined || !this.dialogOpen) {\r\n            return html ``;\r\n        }\r\n        const schemaBody = this.schema.body;\r\n        const schemaExtraOptions = this.schema.extra_options;\r\n        return html `\n      <ha-dialog\n        open\n        scrimClickAction\n        hideActions\n        class=${classMap({ table: this._currTabIndex === 1 })}\n        @closed=${this.closeDialog}\n      >\n        <div class=\"cancel\">\n          <div slot=\"heading\" class=\"heading\">\n            <ha-header-bar id=\"bar\">\n              <div slot=\"title\" class=\"main-title\" .title=${name}>\n                ${localize('common.edit_camera')}\n              </div>\n              <ha-icon-button\n                slot=\"navigationIcon\"\n                dialogAction=\"cancel\"\n                .label=${this.hass.localize('ui.dialogs.more_info_control.dismiss')}\n                id=\"cancel\"\n                .path=${'M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z'}\n              ></ha-icon-button>\n            </ha-header-bar>\n          </div>\n        </div>\n        <div class=\"content\">\n          <div class=\"contentFather\">\n            ${this.validIssue\r\n            ? html `\n                  <div class=\"form-issue\">${this.validIssue}</div>\n                `\r\n            : html ``}\n            <div class=\"form\">\n              <ha-form\n                .hass=${this.hass}\n                .data=${this.cameraInfo}\n                .schema=${schemaBody}\n                .computeLabel=${this._computeLabelCallback}\n                @value-changed=${this._valueChanged}\n              ></ha-form>\n              ${schemaExtraOptions && this.cameraInfo.advanced_options\r\n            ? html `\n                    <ha-form\n                      .hass=${this.hass}\n                      .data=${this.cameraInfo}\n                      .schema=${schemaExtraOptions}\n                      .computeLabel=${this._computeLabelCallback}\n                      @value-changed=${this._valueChanged}\n                    ></ha-form>\n                  `\r\n            : html ``}\n            </div>\n          </div>\n        </div>\n        <div class=\"options\">\n          <ha-fab class=\"button-confirm\" .label=${this.schema.footer.accept} extended @click=${this._accept} })}>\n            <ha-svg-icon slot=\"icon\" .path=${mdiPencil}></ha-svg-icon>\n          </ha-fab>\n        </div>\n      </ha-dialog>\n    `;\r\n    }\r\n    _valueChanged(ev) {\r\n        const config = removeTrailingSpacesInput(ev.detail.value);\r\n        this.cameraInfo = Object.assign(Object.assign({}, this.cameraInfo), config);\r\n    }\r\n    async _accept() {\r\n        const valid = this.validInput();\r\n        if (valid === true) {\r\n            const result = await updateCameraInformation(this.hass, this.cameraInfo);\r\n            if (result === true) {\r\n                this.closeDialog();\r\n                fireEvent(this, 'update-camera-dashboard');\r\n            }\r\n        }\r\n    }\r\n    validInput() {\r\n        if (!this.cameraInfo.integration) {\r\n            this.validIssue = localize('form.issues.missing_integration');\r\n            return false;\r\n        }\r\n        if (!this.cameraInfo.name) {\r\n            this.validIssue = localize('form.issues.camera_name');\r\n            return false;\r\n        }\r\n        if (this.registeredCameras.includes(this.cameraInfo.camera_name)) {\r\n            this.validIssue = localize('form.issues.duplicated_camera_name');\r\n            return false;\r\n        }\r\n        if (!this.cameraInfo.still_image_url && !this.cameraInfo.stream_source) {\r\n            this.validIssue = localize('form.issues.static_stream_source_missing');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    // private removeNull(cameraInfo): cameraInfo {\r\n    //   //Remove null keys in the dictionary (ensuring the data passes the checks in the backend. This is not the most elegant solution but it should work for now)\r\n    //   for (const [key, value] of Object.entries(cameraInfo)) {\r\n    //     if (value === null) {\r\n    //       delete cameraInfo[key];\r\n    //     }\r\n    //   }\r\n    //   return cameraInfo;\r\n    // }\r\n    static get styles() {\r\n        return [\r\n            haStyleDialog,\r\n            css `\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            --mdc-dialog-max-height: 100%;\n            height: 100%;\n          }\n        }\n\n        @media all and (min-width: 1000px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 900px;\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          hui-entity-picker-table {\n            height: calc(100vh - 158px);\n          }\n        }\n\n        .cancel {\n          cursor: pointer;\n          /* padding: 20px 20px 20px 20px; */\n          width: 100%;\n        }\n        .content {\n          width: 100%;\n        }\n\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n          --dialog-content-padding: 2px 24px 20px 24px;\n          --dialog-z-index: 5;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          border-bottom: 1px solid var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        ha-form {\n          margin-left: 8%;\n          margin-right: 8%;\n        }\n\n        ha-formfield {\n          display: flex;\n          height: 56px;\n          align-items: center;\n          --mdc-typography-body2-font-size: 1em;\n        }\n\n        .button-confirm {\n          /* background-color: #4ba2ff; */\n          float: right;\n        }\n\n        .button-back {\n          --mdc-theme-primary: #7b7b7b;\n          float: left;\n          margin-left: 5%;\n        }\n        .options {\n          width: 100%;\n          margin-bottom: 20px;\n        }\n\n        .form-issue {\n          font-family: 'Roboto';\n          font-style: normal;\n          font-size: 12px;\n          color: #e41111;\n          padding: 1% 1% 1% 12%;\n          text-align: left;\n          width: 100%;\n        }\n\n        .icon-back {\n          width: 30px;\n          height: 30px;\n        }\n        .form {\n          margin-left: 10%;\n          margin-right: 10%;\n        }\n\n        .header-text {\n          font-family: 'Roboto';\n          font-style: normal;\n          font-weight: 500;\n          font-size: 36px;\n          line-height: 42px;\n          color: #303033;\n          padding: 1% 1% 1% 5%;\n          text-align: center;\n          width: 38%;\n        }\n\n        .brand-list {\n          display: grid;\n          grid-template-columns: 1fr 1fr 1fr;\n          grid-gap: 9%;\n          padding: 0px 55px 25px;\n        }\n\n        mwc-button {\n          padding: 10px;\n          text-align: center;\n          text-decoration: none;\n          display: inline-block;\n          font-size: 16px;\n          margin: 4px 2px;\n          border-radius: 30px;\n          cursor: pointer;\n          box-shadow: 0px 0px 5px 0px rgba(1, 1, 1, 0);\n          --mdc-theme-primary: white;\n          margin-bottom: 40px;\n        }\n\n        .header_button {\n          color: inherit;\n          text-decoration: none;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n        .cancel-icon {\n          float: right;\n          width: 40px;\n          height: 40px;\n        }\n        @media only screen and (max-width: 500px) {\n          .content {\n            width: 100%;\n            height: 171vw;\n          }\n        }\n      `,\r\n        ];\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"dialogOpen\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"cameraInfo\", void 0);\r\n__decorate([\r\n    state()\r\n], HuiEditDialogCamera.prototype, \"_params\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"backEvent\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"registeredCameras\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], HuiEditDialogCamera.prototype, \"schema\", void 0);\r\n__decorate([\r\n    state()\r\n], HuiEditDialogCamera.prototype, \"_currTabIndex\", void 0);\r\n__decorate([\r\n    state()\r\n], HuiEditDialogCamera.prototype, \"validIssue\", void 0);\r\nHuiEditDialogCamera = __decorate([\r\n    customElement('edit-camera-dialog')\r\n], HuiEditDialogCamera);\r\nexport { HuiEditDialogCamera };\r\n","references":["/workspaces/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/alarmo/frontend/node_modules/lit/directives/class-map.d.ts","/workspaces/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/alarmo/frontend/src/helpers/show-edit-camera-dialog.ts","/workspaces/alarmo/frontend/src/data/websocket.ts","/workspaces/alarmo/frontend/src/schemas.ts","/workspaces/alarmo/frontend/src/localize/localize.ts","/workspaces/alarmo/frontend/src/common.ts","/workspaces/alarmo/frontend/src/types.ts","/workspaces/alarmo/frontend/src/components/camera-brand-icon-button.ts","/workspaces/alarmo/frontend/src/components/search-input-round.ts"]}
