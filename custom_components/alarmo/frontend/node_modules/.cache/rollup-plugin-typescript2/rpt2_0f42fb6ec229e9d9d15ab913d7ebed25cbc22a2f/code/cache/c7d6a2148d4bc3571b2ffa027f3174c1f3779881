{"code":"import { __decorate } from \"tslib\";\r\nimport { mdiPlus } from '@mdi/js';\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement, state } from 'lit/decorators.js';\r\nimport { classMap } from 'lit/directives/class-map';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport memoizeOne from 'memoize-one';\r\nimport Fuse from 'fuse.js';\r\nimport './components/raceland-camera-card';\r\nimport './components/new-camera-card';\r\nimport { getCameraEntities } from './common';\r\nimport { fetchCameraList } from './data/websocket'; //fetchCameraList is not necessary. getCameraEntities\r\nimport { showCreateCameraDialog } from './helpers/show-create-camera-dialog';\r\nimport { localize } from './localize/localize';\r\nimport { loadHaForm } from './load-ha-elements';\r\nimport { SubscribeMixin } from './subscribe-mixin';\r\nlet MyAlarmPanel = class MyAlarmPanel extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._filter = '';\r\n        this._filterCameras = memoizeOne((cameras, filter) => {\r\n            if (!filter) {\r\n                return cameras;\r\n            }\r\n            let filteredCameras = cameras;\r\n            const options = {\r\n                keys: ['name'],\r\n                isCaseSensitive: false,\r\n                minMatchCharLength: 1,\r\n                threshold: 0.2,\r\n            };\r\n            const fuse = new Fuse(filteredCameras, options);\r\n            filteredCameras = fuse.search(filter).map(result => result.item);\r\n            return filteredCameras;\r\n        });\r\n    }\r\n    hassSubscribe() {\r\n        return [\r\n            this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'camera_dashboard_config_updated' }),\r\n        ];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        this.cameraList = await getCameraEntities(this.hass.states);\r\n    }\r\n    async firstUpdated(changedProps) {\r\n        super.firstUpdated(changedProps);\r\n        this.cameraList = await getCameraEntities(this.hass.states);\r\n        ////// These are teste event\r\n        // this.addEventListener('teste-event', () => {\r\n        //   console.log('The EVENT was fired. Hurray!');\r\n        // });\r\n        // this.addEventListener('open-teste-dialog', () => {\r\n        //   showTestDialog(this);\r\n        // });\r\n        //// -------------------------////\r\n        //this.cameraList = await fetchCameraList(this.hass);\r\n        //this.addEventListener('more-info-camera', ev => {\r\n        //  this._handleMoreInfoCamera(ev);\r\n        //});\r\n        //this.addEventListener('update-camera-dashboard', () => {\r\n        //  console.log('fired the event listener');\r\n        //  this._updateCameraDashboard();\r\n        //});\r\n        this.addEventListener('add-new-camera', () => {\r\n            showCreateCameraDialog(this, { cameraDatabase: this.cameraDatabase.Manufacturer });\r\n        });\r\n        //this.addEventListener('open-camera-add-camera-form', ev => {\r\n        //  showCameraDialog(this, {\r\n        //    cameraModelInfo: ev.detail.cameraModelInfo,\r\n        //    schema: ev.detail.schema,\r\n        //    data: ev.detail.data,\r\n        //    formType: ev.detail.formType,\r\n        //    backEvent: ev.detail.backEvent,\r\n        //  });\r\n        //});\r\n        // this.addEventListener('delete-camera', ev => {\r\n        //   showDeleteCameraDialog(this, { cameraInfo: ev.detail.cameraInfo });\r\n        // });\r\n        // this.addEventListener('edit-camera', ev => {\r\n        //   showEditCameraDialog(this, { cameraInfo: ev.detail.cameraInfo });\r\n        // });\r\n        await loadHaForm();\r\n        this.requestUpdate();\r\n    }\r\n    render() {\r\n        if (!customElements.get('ha-app-layout'))\r\n            return html `\r\n        loading...\r\n      `;\r\n        const filteredCameras = this._filterCameras(this.cameraList, this._filter);\r\n        return html `\r\n      ${window.screen.width <= 900\r\n            ? html `\r\n            <div id=\"header\">\r\n              <app-header fixed slot=\"header\">\r\n                <app-toolbar>\r\n                  <ha-menu-button .hass=${this.hass} .narrow=${this.narrow}></ha-menu-button>\r\n                </app-toolbar>\r\n              </app-header>\r\n              <search-input\r\n                .hass=${this.hass}\r\n                .filter=${this._filter}\r\n                @value-changed=${this._handleSearchChange}\r\n                .label=${localize('search.cameras')}\r\n              ></search-input>\r\n            </div>\r\n          `\r\n            : html `\r\n            <search-input\r\n              .hass=${this.hass}\r\n              .filter=${this._filter}\r\n              @value-changed=${this._handleSearchChange}\r\n              .label=${localize('search.cameras')}\r\n            ></search-input>\r\n          `}\r\n      <div class=\"sep\"></div>\r\n      <div class=\"content\">\r\n        <div class=\"contentFather\">\r\n          <div\r\n            class=${classMap({\r\n            'camera-list': (filteredCameras === null || filteredCameras === void 0 ? void 0 : filteredCameras.length) !== 0,\r\n            'camera-list-one': (filteredCameras === null || filteredCameras === void 0 ? void 0 : filteredCameras.length) === 0,\r\n        })}\r\n          >\r\n            ${(filteredCameras === null || filteredCameras === void 0 ? void 0 : filteredCameras.length) === 0\r\n            ? html `\r\n                  <new-camera-card .hass=${this.hass} .narrow=${this.narrow}></new-camera-card>\r\n                `\r\n            : filteredCameras === null || filteredCameras === void 0 ? void 0 : filteredCameras.map((cam_info) => html `\r\n                      <raceland-camera-card\r\n                        .hass=${this.hass}\r\n                        .narrow=${this.narrow}\r\n                        .record=${false}\r\n                        .cameraInfo=${cam_info}\r\n                      ></raceland-camera-card>\r\n                    `)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      ${(filteredCameras === null || filteredCameras === void 0 ? void 0 : filteredCameras.length) === 0\r\n            ? html ``\r\n            : html `\r\n            <ha-fab .label=${localize('common.camera')} extended @click=${this._addCamera} })}>\r\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\r\n            </ha-fab>\r\n          `}\r\n    `;\r\n    }\r\n    _addCamera() {\r\n        //fireEvent(this, 'open-teste-dialog');\r\n        fireEvent(this, 'add-new-camera');\r\n    }\r\n    _handleSearchChange(ev) {\r\n        this._filter = ev.detail.value;\r\n    }\r\n    async _updateCameraDashboard() {\r\n        this.registeredCameras = getCameraEntities(this.hass.states);\r\n        this.cameraList = await fetchCameraList(this.hass);\r\n    }\r\n    static get styles() {\r\n        return css `\r\n      raceland-camera-card {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 80%;\r\n        width: 100%;\r\n        border-style: solid;\r\n        border-width: min(var(--ha-card-border-width, 1px), 10px);\r\n        border-color: transparent;\r\n        border-radius: var(--ha-card-border-radius, 4px);\r\n      }\r\n      .camera-list {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n        grid-auto-rows: 160px;\r\n      }\r\n      search-input {\r\n        display: block;\r\n        --mdc-shape-small: var(--card-picker-search-shape);\r\n        margin: var(--card-picker-search-margin);\r\n        height: 55px;\r\n        width: 100%;\r\n      }\r\n      new-camera-card {\r\n        background-color: var(--card-background-color, white);\r\n        box-shadow: var(\r\n          --mdc-fab-box-shadow,\r\n          0px 3px 5px -1px rgba(0, 0, 0, 0.2),\r\n          0px 6px 10px 0px rgba(0, 0, 0, 0.14),\r\n          0px 1px 18px 0px rgba(0, 0, 0, 0.12)\r\n        );\r\n        font-family: Arial;\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        text-align: center;\r\n        font-size: 2.3rem;\r\n        height: 100%;\r\n        box-sizing: border-box;\r\n        justify-content: center;\r\n        position: relative;\r\n        overflow: hidden;\r\n        border-radius: 1.5rem;\r\n        font-weight: 550;\r\n        max-width: 400px;\r\n      }\r\n      ha-menu-button {\r\n        color: var(--primary-text-color);\r\n      }\r\n      .camera-list-one {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        margin-left: 4px;\r\n        margin-right: 4px;\r\n      }\r\n      /* @media only screen and (max-width: 1200px) {\r\n        search-input {\r\n          width: 100%;\r\n          height: 55px;\r\n        }\r\n      } */\r\n      @media only screen and (max-width: 900px) {\r\n        .camera-list {\r\n          display: grid;\r\n          grid-template-columns: repeat(auto-fill, minmax(178px, 1fr));\r\n          grid-auto-rows: 130px;\r\n          row-gap: 3%;\r\n          margin-bottom: 15%;\r\n          margin-right: 3px;\r\n        }\r\n        #header {\r\n          display: flex;\r\n          background-color: var(--card-background-color);\r\n          height: 55px;\r\n        }\r\n        app-toolbar {\r\n          padding: 0 12px;\r\n        }\r\n        search-input {\r\n          width: 100%;\r\n          height: 55px;\r\n        }\r\n        raceland-camera-card {\r\n          display: flex;\r\n          flex-direction: column;\r\n          height: 100%;\r\n          width: 100%;\r\n          border-style: solid;\r\n          border-width: min(var(--ha-card-border-width, 1px), 10px);\r\n          border-color: transparent;\r\n          border-radius: var(--ha-card-border-radius, 4px);\r\n        }\r\n      }\r\n\r\n      ha-quick-bar {\r\n        display: none;\r\n      }\r\n      .sep {\r\n        padding-top: 2%;\r\n      }\r\n      .content {\r\n        width: 99.5%;\r\n        height: 720px;\r\n      }\r\n      ha-fab {\r\n        position: fixed;\r\n        float: right;\r\n        right: calc(16px + env(safe-area-inset-right));\r\n        bottom: calc(16px + env(safe-area-inset-bottom));\r\n        z-index: 1;\r\n      }\r\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"registeredCameras\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"newCameras\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"cameraInfo\", void 0);\r\n__decorate([\r\n    property({ attribute: false })\r\n], MyAlarmPanel.prototype, \"cameraList\", void 0);\r\n__decorate([\r\n    state()\r\n], MyAlarmPanel.prototype, \"_filter\", void 0);\r\nMyAlarmPanel = __decorate([\r\n    customElement('alarm-panel')\r\n], MyAlarmPanel);\r\nexport { MyAlarmPanel };\r\n","references":["/workspaces/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/alarmo/frontend/node_modules/lit/directives/class-map.d.ts","/workspaces/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/alarmo/frontend/node_modules/memoize-one/dist/memoize-one.d.ts","/workspaces/alarmo/frontend/node_modules/fuse.js/dist/fuse.d.ts","/workspaces/alarmo/frontend/src/components/raceland-camera-card.ts","/workspaces/alarmo/frontend/src/components/new-camera-card.ts","/workspaces/alarmo/frontend/src/common.ts","/workspaces/alarmo/frontend/src/data/websocket.ts","/workspaces/alarmo/frontend/src/helpers/show-create-camera-dialog.ts","/workspaces/alarmo/frontend/src/helpers/show-delete-camera-dialog.ts","/workspaces/alarmo/frontend/src/helpers/show-edit-camera-dialog.ts","/workspaces/alarmo/frontend/src/helpers/show-camera-form-dialog.ts","/workspaces/alarmo/frontend/src/helpers/show-create-test-dialog.ts","/workspaces/alarmo/frontend/src/localize/localize.ts","/workspaces/alarmo/frontend/src/load-ha-elements.ts","/workspaces/alarmo/frontend/src/types.ts","/workspaces/alarmo/frontend/src/subscribe-mixin.ts"]}
